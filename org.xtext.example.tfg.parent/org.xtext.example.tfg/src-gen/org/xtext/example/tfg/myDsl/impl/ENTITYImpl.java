/**
 * generated by Xtext 2.9.0
 */
package org.xtext.example.tfg.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.tfg.myDsl.ENTITY;
import org.xtext.example.tfg.myDsl.ENTITYELEMENT;
import org.xtext.example.tfg.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ENTITY</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.tfg.myDsl.impl.ENTITYImpl#isAbstractEntity <em>Abstract Entity</em>}</li>
 *   <li>{@link org.xtext.example.tfg.myDsl.impl.ENTITYImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link org.xtext.example.tfg.myDsl.impl.ENTITYImpl#getEntityElements <em>Entity Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ENTITYImpl extends ELEMENTImpl implements ENTITY
{
  /**
   * The default value of the '{@link #isAbstractEntity() <em>Abstract Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstractEntity()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_ENTITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstractEntity() <em>Abstract Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstractEntity()
   * @generated
   * @ordered
   */
  protected boolean abstractEntity = ABSTRACT_ENTITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected ENTITY parent;

  /**
   * The cached value of the '{@link #getEntityElements() <em>Entity Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntityElements()
   * @generated
   * @ordered
   */
  protected EList<ENTITYELEMENT> entityElements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ENTITYImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAbstractEntity()
  {
    return abstractEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAbstractEntity(boolean newAbstractEntity)
  {
    boolean oldAbstractEntity = abstractEntity;
    abstractEntity = newAbstractEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ENTITY__ABSTRACT_ENTITY, oldAbstractEntity, abstractEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ENTITY getParent()
  {
    if (parent != null && parent.eIsProxy())
    {
      InternalEObject oldParent = (InternalEObject)parent;
      parent = (ENTITY)eResolveProxy(oldParent);
      if (parent != oldParent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.ENTITY__PARENT, oldParent, parent));
      }
    }
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ENTITY basicGetParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParent(ENTITY newParent)
  {
    ENTITY oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ENTITY__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ENTITYELEMENT> getEntityElements()
  {
    if (entityElements == null)
    {
      entityElements = new EObjectContainmentEList<ENTITYELEMENT>(ENTITYELEMENT.class, this, MyDslPackage.ENTITY__ENTITY_ELEMENTS);
    }
    return entityElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.ENTITY__ENTITY_ELEMENTS:
        return ((InternalEList<?>)getEntityElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ENTITY__ABSTRACT_ENTITY:
        return isAbstractEntity();
      case MyDslPackage.ENTITY__PARENT:
        if (resolve) return getParent();
        return basicGetParent();
      case MyDslPackage.ENTITY__ENTITY_ELEMENTS:
        return getEntityElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ENTITY__ABSTRACT_ENTITY:
        setAbstractEntity((Boolean)newValue);
        return;
      case MyDslPackage.ENTITY__PARENT:
        setParent((ENTITY)newValue);
        return;
      case MyDslPackage.ENTITY__ENTITY_ELEMENTS:
        getEntityElements().clear();
        getEntityElements().addAll((Collection<? extends ENTITYELEMENT>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ENTITY__ABSTRACT_ENTITY:
        setAbstractEntity(ABSTRACT_ENTITY_EDEFAULT);
        return;
      case MyDslPackage.ENTITY__PARENT:
        setParent((ENTITY)null);
        return;
      case MyDslPackage.ENTITY__ENTITY_ELEMENTS:
        getEntityElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ENTITY__ABSTRACT_ENTITY:
        return abstractEntity != ABSTRACT_ENTITY_EDEFAULT;
      case MyDslPackage.ENTITY__PARENT:
        return parent != null;
      case MyDslPackage.ENTITY__ENTITY_ELEMENTS:
        return entityElements != null && !entityElements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (abstractEntity: ");
    result.append(abstractEntity);
    result.append(')');
    return result.toString();
  }

} //ENTITYImpl
