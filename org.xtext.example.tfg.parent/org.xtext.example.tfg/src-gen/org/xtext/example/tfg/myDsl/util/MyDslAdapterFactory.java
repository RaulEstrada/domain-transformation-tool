/**
 * generated by Xtext 2.9.0
 */
package org.xtext.example.tfg.myDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.tfg.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.tfg.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseMODEL(MODEL object)
      {
        return createMODELAdapter();
      }
      @Override
      public Adapter caseELEMENT(ELEMENT object)
      {
        return createELEMENTAdapter();
      }
      @Override
      public Adapter caseENTITY(ENTITY object)
      {
        return createENTITYAdapter();
      }
      @Override
      public Adapter caseENTITYELEMENT(ENTITYELEMENT object)
      {
        return createENTITYELEMENTAdapter();
      }
      @Override
      public Adapter caseVALUEOBJECT(VALUEOBJECT object)
      {
        return createVALUEOBJECTAdapter();
      }
      @Override
      public Adapter caseENUMERATION(ENUMERATION object)
      {
        return createENUMERATIONAdapter();
      }
      @Override
      public Adapter caseLINK(LINK object)
      {
        return createLINKAdapter();
      }
      @Override
      public Adapter caseANNOTATED_ATTRIBUTE(ANNOTATED_ATTRIBUTE object)
      {
        return createANNOTATED_ATTRIBUTEAdapter();
      }
      @Override
      public Adapter caseATTRIBUTE(ATTRIBUTE object)
      {
        return createATTRIBUTEAdapter();
      }
      @Override
      public Adapter caseRELATIONSHIP(RELATIONSHIP object)
      {
        return createRELATIONSHIPAdapter();
      }
      @Override
      public Adapter caseOPERATION(OPERATION object)
      {
        return createOPERATIONAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.MODEL <em>MODEL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.MODEL
   * @generated
   */
  public Adapter createMODELAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ELEMENT <em>ELEMENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ELEMENT
   * @generated
   */
  public Adapter createELEMENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ENTITY <em>ENTITY</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ENTITY
   * @generated
   */
  public Adapter createENTITYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ENTITYELEMENT <em>ENTITYELEMENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ENTITYELEMENT
   * @generated
   */
  public Adapter createENTITYELEMENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.VALUEOBJECT <em>VALUEOBJECT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.VALUEOBJECT
   * @generated
   */
  public Adapter createVALUEOBJECTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ENUMERATION <em>ENUMERATION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ENUMERATION
   * @generated
   */
  public Adapter createENUMERATIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.LINK <em>LINK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.LINK
   * @generated
   */
  public Adapter createLINKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ANNOTATED_ATTRIBUTE <em>ANNOTATED ATTRIBUTE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ANNOTATED_ATTRIBUTE
   * @generated
   */
  public Adapter createANNOTATED_ATTRIBUTEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.ATTRIBUTE <em>ATTRIBUTE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.ATTRIBUTE
   * @generated
   */
  public Adapter createATTRIBUTEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.RELATIONSHIP <em>RELATIONSHIP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.RELATIONSHIP
   * @generated
   */
  public Adapter createRELATIONSHIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.tfg.myDsl.OPERATION <em>OPERATION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.tfg.myDsl.OPERATION
   * @generated
   */
  public Adapter createOPERATIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
