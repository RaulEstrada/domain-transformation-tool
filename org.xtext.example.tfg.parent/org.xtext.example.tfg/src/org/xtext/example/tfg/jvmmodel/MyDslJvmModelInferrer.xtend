/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.tfg.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.eclipse.xtext.common.types.TypesFactory
import org.xtext.example.tfg.myDsl.ENTITY
import java.io.Serializable
import org.eclipse.xtext.common.types.JvmVisibility
import org.xtext.example.tfg.myDsl.ANNOTATED_ATTRIBUTE
import org.eclipse.xtext.common.types.JvmField
import org.xtext.example.tfg.myDsl.VALUEOBJECT
import org.xtext.example.tfg.myDsl.ATTRIBUTE
import org.xtext.example.tfg.myDsl.ENUMERATION
import org.xtext.example.tfg.myDsl.OPERATION

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class MyDslJvmModelInferrer extends AbstractModelInferrer {

    /**
     * convenience API to build and initialize JVM types and their members.
     */
	@Inject extension JvmTypesBuilder
	@Inject TypesFactory typesFactory

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the closure you pass to the returned
	 *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
	 *            initializeLater(..)}.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(ENTITY element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
   		acceptor.accept(element.toClass(element.name)) [
   			abstract = element.abstractEntity;
   			superTypes += typeRef(Serializable)
   			if (element.parent != null) {
   				superTypes += typeRef(element.parent.name)
   			}
   			members += createSerializable()
   			for (ANNOTATED_ATTRIBUTE annAttribute : element.entityElements.filter(ANNOTATED_ATTRIBUTE)) {
   				var attrib = annAttribute.toField(annAttribute.name, annAttribute.type)
   				/*if (annAttribute.annotation=='@Id') {
   					attrib.annotations += annAttribute.toAnnotation("javax.persistence.Id");
   				} else if (annAttribute.annotation=='@Version') {
   					attrib.annotations += annAttribute.toAnnotation("javax.persistence.Version");
   				}*/
   				members += attrib
   			}
   			for (ANNOTATED_ATTRIBUTE annAttribute :element.entityElements.filter(ANNOTATED_ATTRIBUTE)) {
   				members += annAttribute.toGetter(annAttribute.name, annAttribute.type)
   				if (annAttribute.annotation!='@Id') {
   					members += annAttribute.toSetter(annAttribute.name, annAttribute.type)
   				}
   			}
   			for (OPERATION operation :element.entityElements.filter(OPERATION)) {
   				members += operation.toMethod(operation.name, operation.^return)[
   					parameters += operation.params;
   					body = '''// TODO Implement method
throw new UnsupportedOperationException();'''
   				];
   			}
   		]
	}
	
	def dispatch void infer(VALUEOBJECT element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(element.toClass(element.name)) [
			for (ATTRIBUTE attrib : element.valueattributes) {
				members += attrib.toField(attrib.name, attrib.type)
			}
			for (ATTRIBUTE attrib : element.valueattributes) {
				members += attrib.toGetter(attrib.name, attrib.type)
				members += attrib.toSetter(attrib.name, attrib.type)
			}
		]
	}
	
	def dispatch void infer(ENUMERATION element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(element.toEnumerationType(element.name)) [
			for (String enumElement : element.enumelements) {
				members += toEnumerationLiteral(enumElement)
			}
		]
	}
	
	def JvmField createSerializable() {
		var serializableAttribute = typesFactory.createJvmField()
   		serializableAttribute.setSimpleName("serialVersionUID");
   		serializableAttribute.setVisibility(JvmVisibility.PRIVATE);
		serializableAttribute.setType(cloneWithProxies(Long.typeRef()));
		serializableAttribute.final = true;
		serializableAttribute.initializer = '''1l''';
		serializableAttribute.static = true;
		return serializableAttribute;
	}
}
