//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.14 at 03:14:15 PM CET 
//


package model.structure;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import model.associations.ManyToMany;
import model.associations.ManyToOne;
import model.associations.OneToMany;
import model.associations.OneToOne;
import model.customtypes.AccessType;


/**
 * 
 * 
 *         Defines the settings and mappings for embeddable objects. Is 
 *         allowed to be sparsely populated and used in conjunction with 
 *         the annotations. Alternatively, the metadata-complete attribute 
 *         can be used to indicate that no annotations are to be processed 
 *         in the class. If this is the case then the defaulting rules will 
 *         be recursively applied.
 * 
 *         @Target({TYPE}) @Retention(RUNTIME)
 *         public @interface Embeddable {}
 * 
 *       
 * 
 * <p>Java class for embeddable complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="embeddable">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="attributes" type="{http://xmlns.jcp.org/xml/ns/persistence/orm}embeddable-attributes" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="class" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="access" type="{http://xmlns.jcp.org/xml/ns/persistence/orm}access-type" />
 *       &lt;attribute name="metadata-complete" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "embeddable", propOrder = {
    "description",
    "attributes"
})
public class Embeddable implements ElementInRelationship {

    protected String description;
    protected EmbeddableAttributes attributes;
    @XmlAttribute(name = "class", required = true)
    protected String clazz;
    @XmlAttribute(name = "access")
    protected AccessType access;
    @XmlAttribute(name = "metadata-complete")
    protected Boolean metadataComplete;
    @XmlTransient
    private String embeddableContent;
    @XmlTransient
    private String name;
    @XmlTransient
    private boolean isAbstract;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the attributes property.
     * 
     * @return
     *     possible object is
     *     {@link EmbeddableAttributes }
     *     
     */
    public EmbeddableAttributes getAttributes() {
        return attributes;
    }

    /**
     * Sets the value of the attributes property.
     * 
     * @param value
     *     allowed object is
     *     {@link EmbeddableAttributes }
     *     
     */
    public void setAttributes(EmbeddableAttributes value) {
        this.attributes = value;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClazz(String value) {
        this.clazz = value;
    }

    /**
     * Gets the value of the access property.
     * 
     * @return
     *     possible object is
     *     {@link AccessType }
     *     
     */
    public AccessType getAccess() {
        return access;
    }

    /**
     * Sets the value of the access property.
     * 
     * @param value
     *     allowed object is
     *     {@link AccessType }
     *     
     */
    public void setAccess(AccessType value) {
        this.access = value;
    }

    /**
     * Gets the value of the metadataComplete property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isMetadataComplete() {
        return metadataComplete;
    }

    /**
     * Sets the value of the metadataComplete property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMetadataComplete(Boolean value) {
        this.metadataComplete = value;
    }

	public String getEmbeddableContent() {
		return embeddableContent;
	}

	public void setEmbeddableContent(String embeddableContent) {
		this.embeddableContent = embeddableContent;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isAbstract() {
		return isAbstract;
	}

	public void setAbstract(boolean isAbstract) {
		this.isAbstract = isAbstract;
	}

	@Override
	public ManyToMany getCorrespondingManyToMany(String targetEntity, String mappedBy) {
		for (ManyToMany m2m : getAttributes().getManyToMany()) {
			if (m2m.getTargetEntity().equals(targetEntity) && m2m.getMappedBy() != null && m2m.getMappedBy().equals(mappedBy)) {
				return m2m;
			}
		}
		return null;
	}

	@Override
	public OneToOne getCorrespondingOneToOne(String targetEntity, String mappedBy) {
		for (OneToOne o2o : getAttributes().getOneToOne()) {
			if (o2o.getTargetEntity().equals(targetEntity) && o2o.getMappedBy() != null && o2o.getMappedBy().equals(mappedBy)) {
				return o2o;
			}
		}
		return null;
	}

	@Override
	public ManyToOne getCorrespondingManyToOne(String targetEntity, String mappedBy) {
		for (ManyToOne m2o : getAttributes().getManyToOne()) {
			if (m2o.getTargetEntity().equals(targetEntity)) {
				return m2o;
			}
		}
		return null;
	}

	@Override
	public OneToMany getCorrespondingOneToMany(String targetEntity, String mappedBy) {
		for (OneToMany o2m : getAttributes().getOneToMany()) {
			if (o2m.getTargetEntity().equals(targetEntity) && o2m.getMappedBy() != null && o2m.getMappedBy().equals(mappedBy)) {
				return o2m;
			}
		}
		return null;
	}
	
}
